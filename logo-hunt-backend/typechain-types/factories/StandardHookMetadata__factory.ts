/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StandardHookMetadata,
  StandardHookMetadataInterface,
} from "../StandardHookMetadata";

const _abi = [
  {
    inputs: [],
    name: "VARIANT",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c1610052600b82828239805160001a607314610045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c806326418953146038575b600080fd5b603e6052565b604051604991906072565b60405180910390f35b600181565b600061ffff82169050919050565b606c816057565b82525050565b6000602082019050608560008301846065565b9291505056fea26469706673582212206315b658605c0e7816b70ac0a069fb07caf4e72d47bf9201c01ddd62fff22ce964736f6c63430008180033";

type StandardHookMetadataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StandardHookMetadataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StandardHookMetadata__factory extends ContractFactory {
  constructor(...args: StandardHookMetadataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StandardHookMetadata> {
    return super.deploy(overrides || {}) as Promise<StandardHookMetadata>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StandardHookMetadata {
    return super.attach(address) as StandardHookMetadata;
  }
  connect(signer: Signer): StandardHookMetadata__factory {
    return super.connect(signer) as StandardHookMetadata__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StandardHookMetadataInterface {
    return new utils.Interface(_abi) as StandardHookMetadataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StandardHookMetadata {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StandardHookMetadata;
  }
}
