/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LogoHuntGameInterface extends utils.Interface {
  functions: {
    "HANDLE_GAS_AMOUNT()": FunctionFragment;
    "PACKAGE_VERSION()": FunctionFragment;
    "domains()": FunctionFragment;
    "enrollRemoteRouter(uint32,bytes32)": FunctionFragment;
    "enrollRemoteRouters(uint32[],bytes32[])": FunctionFragment;
    "findLogo(uint32,address)": FunctionFragment;
    "handle(uint32,bytes32,bytes)": FunctionFragment;
    "hook()": FunctionFragment;
    "interchainSecurityModule()": FunctionFragment;
    "localDomain()": FunctionFragment;
    "logosFound()": FunctionFragment;
    "mailbox()": FunctionFragment;
    "owner()": FunctionFragment;
    "personalCollection(address)": FunctionFragment;
    "quoteDispatch(uint32,bytes)": FunctionFragment;
    "received()": FunctionFragment;
    "receivedFrom(uint32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "routers(uint32)": FunctionFragment;
    "sent()": FunctionFragment;
    "sentTo(uint32)": FunctionFragment;
    "setHook(address)": FunctionFragment;
    "setInterchainSecurityModule(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unenrollRemoteRouter(uint32)": FunctionFragment;
    "unenrollRemoteRouters(uint32[])": FunctionFragment;
    "uniqueParticipants()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "HANDLE_GAS_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PACKAGE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "domains", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enrollRemoteRouter",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enrollRemoteRouters",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "findLogo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "handle",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hook", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "interchainSecurityModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "localDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "logosFound",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mailbox", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "personalCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteDispatch",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "received", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivedFrom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sentTo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setHook", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setInterchainSecurityModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unenrollRemoteRouter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unenrollRemoteRouters",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "uniqueParticipants",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "HANDLE_GAS_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PACKAGE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enrollRemoteRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enrollRemoteRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findLogo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "handle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interchainSecurityModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "logosFound", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mailbox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "personalCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteDispatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "received", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sentTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setInterchainSecurityModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unenrollRemoteRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unenrollRemoteRouters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniqueParticipants",
    data: BytesLike
  ): Result;

  events: {
    "HandleGasAmountSet(uint32,uint256)": EventFragment;
    "HookSet(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "IsmSet(address)": EventFragment;
    "LogoDiscoverySync(uint256,uint32,uint32)": EventFragment;
    "LogoFound(address,uint256,uint256,uint32,uint32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReceivedLogoDiscovery(uint32,uint32,bytes32,address,uint256,uint256)": EventFragment;
    "SentLogoDiscovery(uint32,uint32,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HandleGasAmountSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HookSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IsmSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogoDiscoverySync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogoFound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedLogoDiscovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SentLogoDiscovery"): EventFragment;
}

export type HandleGasAmountSetEvent = TypedEvent<
  [number, BigNumber],
  { destination: number; handleGasAmount: BigNumber }
>;

export type HandleGasAmountSetEventFilter =
  TypedEventFilter<HandleGasAmountSetEvent>;

export type HookSetEvent = TypedEvent<[string], { _hook: string }>;

export type HookSetEventFilter = TypedEventFilter<HookSetEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type IsmSetEvent = TypedEvent<[string], { _ism: string }>;

export type IsmSetEventFilter = TypedEventFilter<IsmSetEvent>;

export type LogoDiscoverySyncEvent = TypedEvent<
  [BigNumber, number, number],
  { newTotalCount: BigNumber; origin: number; destination: number }
>;

export type LogoDiscoverySyncEventFilter =
  TypedEventFilter<LogoDiscoverySyncEvent>;

export type LogoFoundEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, number],
  {
    finder: string;
    totalCount: BigNumber;
    personalCount: BigNumber;
    origin: number;
    destination: number;
  }
>;

export type LogoFoundEventFilter = TypedEventFilter<LogoFoundEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ReceivedLogoDiscoveryEvent = TypedEvent<
  [number, number, string, string, BigNumber, BigNumber],
  {
    origin: number;
    destination: number;
    sender: string;
    finder: string;
    totalCount: BigNumber;
    personalCount: BigNumber;
  }
>;

export type ReceivedLogoDiscoveryEventFilter =
  TypedEventFilter<ReceivedLogoDiscoveryEvent>;

export type SentLogoDiscoveryEvent = TypedEvent<
  [number, number, string, BigNumber, BigNumber],
  {
    origin: number;
    destination: number;
    finder: string;
    totalCount: BigNumber;
    personalCount: BigNumber;
  }
>;

export type SentLogoDiscoveryEventFilter =
  TypedEventFilter<SentLogoDiscoveryEvent>;

export interface LogoHuntGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LogoHuntGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<[string]>;

    domains(overrides?: CallOverrides): Promise<[number[]]>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    findLogo(
      _destinationDomain: BigNumberish,
      _userWallet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hook(overrides?: CallOverrides): Promise<[string]>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<[string]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    logosFound(overrides?: CallOverrides): Promise<[BigNumber]>;

    mailbox(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    personalCollection(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quoteDispatch(
      _destinationDomain: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    received(overrides?: CallOverrides): Promise<[BigNumber]>;

    receivedFrom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    routers(
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    sent(overrides?: CallOverrides): Promise<[BigNumber]>;

    sentTo(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uniqueParticipants(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

  domains(overrides?: CallOverrides): Promise<number[]>;

  enrollRemoteRouter(
    _domain: BigNumberish,
    _router: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enrollRemoteRouters(
    _domains: BigNumberish[],
    _addresses: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  findLogo(
    _destinationDomain: BigNumberish,
    _userWallet: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handle(
    _origin: BigNumberish,
    _sender: BytesLike,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hook(overrides?: CallOverrides): Promise<string>;

  interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  logosFound(overrides?: CallOverrides): Promise<BigNumber>;

  mailbox(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  personalCollection(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quoteDispatch(
    _destinationDomain: BigNumberish,
    _message: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  received(overrides?: CallOverrides): Promise<BigNumber>;

  receivedFrom(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  routers(_domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

  sent(overrides?: CallOverrides): Promise<BigNumber>;

  sentTo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  setHook(
    _hook: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterchainSecurityModule(
    _module: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unenrollRemoteRouter(
    _domain: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unenrollRemoteRouters(
    _domains: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uniqueParticipants(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<string>;

    domains(overrides?: CallOverrides): Promise<number[]>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    findLogo(
      _destinationDomain: BigNumberish,
      _userWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hook(overrides?: CallOverrides): Promise<string>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<string>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    logosFound(overrides?: CallOverrides): Promise<BigNumber>;

    mailbox(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    personalCollection(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteDispatch(
      _destinationDomain: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    received(overrides?: CallOverrides): Promise<BigNumber>;

    receivedFrom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    routers(_domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

    sent(overrides?: CallOverrides): Promise<BigNumber>;

    sentTo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setHook(_hook: string, overrides?: CallOverrides): Promise<void>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    uniqueParticipants(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "HandleGasAmountSet(uint32,uint256)"(
      destination?: BigNumberish | null,
      handleGasAmount?: null
    ): HandleGasAmountSetEventFilter;
    HandleGasAmountSet(
      destination?: BigNumberish | null,
      handleGasAmount?: null
    ): HandleGasAmountSetEventFilter;

    "HookSet(address)"(_hook?: null): HookSetEventFilter;
    HookSet(_hook?: null): HookSetEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "IsmSet(address)"(_ism?: null): IsmSetEventFilter;
    IsmSet(_ism?: null): IsmSetEventFilter;

    "LogoDiscoverySync(uint256,uint32,uint32)"(
      newTotalCount?: null,
      origin?: BigNumberish | null,
      destination?: BigNumberish | null
    ): LogoDiscoverySyncEventFilter;
    LogoDiscoverySync(
      newTotalCount?: null,
      origin?: BigNumberish | null,
      destination?: BigNumberish | null
    ): LogoDiscoverySyncEventFilter;

    "LogoFound(address,uint256,uint256,uint32,uint32)"(
      finder?: string | null,
      totalCount?: null,
      personalCount?: null,
      origin?: BigNumberish | null,
      destination?: BigNumberish | null
    ): LogoFoundEventFilter;
    LogoFound(
      finder?: string | null,
      totalCount?: null,
      personalCount?: null,
      origin?: BigNumberish | null,
      destination?: BigNumberish | null
    ): LogoFoundEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ReceivedLogoDiscovery(uint32,uint32,bytes32,address,uint256,uint256)"(
      origin?: BigNumberish | null,
      destination?: BigNumberish | null,
      sender?: null,
      finder?: null,
      totalCount?: null,
      personalCount?: null
    ): ReceivedLogoDiscoveryEventFilter;
    ReceivedLogoDiscovery(
      origin?: BigNumberish | null,
      destination?: BigNumberish | null,
      sender?: null,
      finder?: null,
      totalCount?: null,
      personalCount?: null
    ): ReceivedLogoDiscoveryEventFilter;

    "SentLogoDiscovery(uint32,uint32,address,uint256,uint256)"(
      origin?: BigNumberish | null,
      destination?: BigNumberish | null,
      finder?: null,
      totalCount?: null,
      personalCount?: null
    ): SentLogoDiscoveryEventFilter;
    SentLogoDiscovery(
      origin?: BigNumberish | null,
      destination?: BigNumberish | null,
      finder?: null,
      totalCount?: null,
      personalCount?: null
    ): SentLogoDiscoveryEventFilter;
  };

  estimateGas: {
    HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    domains(overrides?: CallOverrides): Promise<BigNumber>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    findLogo(
      _destinationDomain: BigNumberish,
      _userWallet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hook(overrides?: CallOverrides): Promise<BigNumber>;

    interchainSecurityModule(overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    logosFound(overrides?: CallOverrides): Promise<BigNumber>;

    mailbox(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    personalCollection(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteDispatch(
      _destinationDomain: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    received(overrides?: CallOverrides): Promise<BigNumber>;

    receivedFrom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    routers(
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sent(overrides?: CallOverrides): Promise<BigNumber>;

    sentTo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uniqueParticipants(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    HANDLE_GAS_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PACKAGE_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domains(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enrollRemoteRouter(
      _domain: BigNumberish,
      _router: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enrollRemoteRouters(
      _domains: BigNumberish[],
      _addresses: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    findLogo(
      _destinationDomain: BigNumberish,
      _userWallet: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handle(
      _origin: BigNumberish,
      _sender: BytesLike,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interchainSecurityModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    logosFound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mailbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    personalCollection(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteDispatch(
      _destinationDomain: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    received(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivedFrom(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    routers(
      _domain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sentTo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setHook(
      _hook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterchainSecurityModule(
      _module: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unenrollRemoteRouter(
      _domain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unenrollRemoteRouters(
      _domains: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uniqueParticipants(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
